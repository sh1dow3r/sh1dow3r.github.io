[ { "title": "Automated Approach for Malware Collection and Analysis", "url": "/posts/Automated_Approach_for_Malware_Collection_and_Analysis/", "categories": "DFIR, Malware_Analysis", "tags": "Malware Analysis", "date": "2022-03-13 00:00:00 +0800", "snippet": "IntroductionFor the last couple of weeks, I have been poking around with a remarkable open-source project called MWDB-Core, short for Malware Database Core. The beauty of this project is its simplicity! It was developed in flask; therefore, you can expect it to be API-enabled! It also supports the Karton engine, allowing for analysis automation, integration to other projects, and more. While the project is still in constant development, I find it fully featured and has immense potential for growth. Hence, this blog ;)Enter TheZooTheZoo is a customizable version of MWDB-Core with other plugins that will make a life of a Malware, CTI, Incident responder analyst less difficult. ): With that said, let’s get technical! As shown in the screenshot below, TheZoo contains 13 docker containers so far, starting from core and going to plugins: To make it even more digestible, I have created a topology detailing TheZoo architecture. 1- MWDB-Core: This is the core engine for the project, it contains all the API/Underlying working of the projects. 2- MWDB-Web: This is the web GUI for the project. 3- Redis: This is an in-memory data store used by Karton engine 4- Postgres: This is an the database that contain the sample, users, relationships between files, basically all the database of the project with the exception of the samples files 5- Minio: This is an open-source version of AWS S3 service. It store files as objects. This highly recommended for scalability reason rather than storing the files locally on the filesystem. 6- Karton-System: This is an engine written in python that makes task ran on the sample easier and modular, as we will see later in the post. 7- Karton-Dashboard: This is a Karton plugin that serves as a web GUI for all the Karton tasks in the project. 8- Karton-Reporter: This is a Karton plugin that reports all the other plugins outputs back to MWDB-Web, more details later. 9- Karton-clissifier: This is a Karton plugin that clasify malware base on MIME Type. 10- Karton-strings: This is a Karton plugin that runs the strings command and reports the output to MWDB-Web using the reporter plugin. 11- Karton-floss: This is a Karton plugin that runs the flare-floss command and reports the output to MWDB-Web using the reporter plugin. 12- Karton-capa: This is a Karton plugin that runs the flare-capa command and reports the output of the capability of the malware to MWDB-Web using the reporter plugin. 13- Karton-: This is a Karton plugin that runs the yara command on the samples and reports the output to MWDB-Web using the reporter plugin. How to Get Started? In order to get started, there are three steps: - Clone the project with the recursive flag as follows: git clone https://github.com/sh1dow3r/TheZoo --recursive - Run the script main.py to add all the needed project variables, such as passwords, configuration variables, etc.. The script will generate a file called mwdb-vars.env; feel free to review the file and adjust it to your needs. I’ll include the resource in the last section to help de-obfuscate some of the variables. If you’re anxious to get it up and running, leave the file as-is: python3 main.py - Lastly, run the docker-compose file using the following command: docker-compose up -d NOTE: This might take a while in the initial install, so be patient :)How to use it? Hopefully, by now, you have TheZoo up and running. You can check by using the command docker-compose ps. you should see all the containers state to be up as show in the first figure. If all goes well, navigate to http://localhost:8080 and log in with the user admin and the password placed under MWDB_ADMIN_PASSWORD in the mwdb-vars.env file. After logging in, the web interface should relatively be intuitive. feel free to poke around at your leisure! For now, navigate to the upload tab in the top bar and upload a sample of your favorite malware. For me, it had to be Wannacry, not sure why! An example of the what it should look like it shown below: After uploading the sample, you will be redirected to the sample page, notice the url: each malware is stored at its sha256 value in the url, which is kind of neat way of storing uniq sample! Moving on to our sample, you will notice a few things I highlighted in colored-boxes, depicted in the screenshot below: Now let’s explain what’s going on the screenshot: Each sample you upload will have a page that looks like this, with the power of Karton and Karton plugins, it should hopefully gives an insight of what the malware is doing without executing it (AKA Static Analysis!). In the screenshot each box represent a specific task ran in the background: - Red: Represents the output of the classifier container . - Green: Represents the output of any yara_rule that matched the sample, please note that you have to write the Yara rule yourself and add to TheZoo_volume in order for it to get added matched with samples. - Orange: Represents the output of the flare-floss Mandiant script found in github. - Pink: Represents the output of the flare-capa Mandiant script found in github. - Brown: Represents the output of the strings command of the executable. Another awesome feature the MWDB-Core has is the relationship tab under each sample, which can be really valuable on the long run for CTI! Last but not least, I’d like to show an example of what an output should look like of a malicious file, let’s take the flare-cape plugin, for instance, it other words if we click on the Pink color, what would it show?Sounds interesting; I wanna help? Ideas in this kind domain are rich, if you have an idea and would like to share, feel free to drop me an issue on Github, also PR are always appreciated!Conclusion In this blog post, I went over my approach to automating the collection and analysis of malware using the MWDB-Core platform. Before closing, I’d like to point out that I have only scratched the surface of what the platform can do, so I would highly recommend reading through their docs for further details. I hope you enjoyed the reading and as always, keep killing it!ReferencesMWDB docsKarton Docs Karton PlaygroundKarton Plugins" }, { "title": "Securing Environment Remote Access", "url": "/posts/Securing_Environment_Remote_Access/", "categories": "Homelab_Projects", "tags": "Experiments", "date": "2021-03-10 00:00:00 +0800", "snippet": "IntroductionUsing only VPN as your main method to access you homelab environment is not alway as reliable as you would hope so. VPN sometimes is unstable and hard to troubleshoot, especially remotely.If you have wonder if there is a way to access your web console of your homelab hypervisor externally and restrict access to it, this blog is what you are seeking. In this blog, I will show a use case where you can use an open-source reverse proxy alongside Cloudflare “awesome” dashboard functionality.What you will need?For this post, you will need three things: 1- Router that has public IP. In this blog I choose pfSense ❤ 2- Virtual machine that has docker installed and has access to the internet. 3- Registered domain name through Cloudflare. TerminologyBefore diving into the project, let’s take a define some terms to establish ground-level knowledge:Cloudflare Dashboard: Cloudflare dashboard is where you define the DNS records and modify them. Since we’re on the subject, the dashboard so many many AMAZING services that I can’t even begin to fathom what you could accomplish with them. For the time being, we will stick with the basics ones such as: 1- DNS: To define our DNS records 2- SSL/TLS: To modify TLS negotiations with the proxy and other parties. 3- Access: Protect internal resources by requiring authentication To read more about these services, visit their documentation page.Traefik: Traefik is a dockerized and open-source reverse proxy and load balancer typically used with microservices in the cloud(Docker swarm, Kubernetes).Install/Setup- Cloudflare Setup Under Cloudflare dashboard Go to the DNS tab and create a new ‘A’ record that corrospond to you public IP. An example is shown in the screenshot below. This record will be used for the traefik web interface.After adding the ‘A’ record, you will need to add a ‘CNAME’ record for each microservice you need to access externally. The CNAME record will point back to the Traefik ‘A’ record “dynamic” we added earlier.Here’s an example of adding a web01 record.Securing your mircoservices with Cloudflear AccessCloudflare provides you with functionality where you can limit the access of specific page to certain users. The identity provider varies based on your choosing. Every identity provider has their instruction written after you choose it.After you setup your login method create an Access policy for your microservice you want to limit its access. In the screenshot below, I’m creating an access policy that limits the access of web01 page to the user with l33t@gamil.com email. There are many ways to restrict access to a page that is better than what I’m showing that Cloudflare feature such as (“Emails ends with”, “IP range”, “Access Service Token”, … ).- VM setupAfter we install the dependencies namely docker and docker-compose in the VM.Open the terminal in you VM and clone this repo: root$ git clone https://github.com/sh1dow3r/Traefik_CF root$ cd Trafik_CFInside the repo you will need to apply two task1- Generate a certificate for Traefik microservices and place it in certs directory, which can be easily done with this command mkdir -p certs; openssl req -x509 -newkey rsa:4096 -nodes -out certs/cert.crt -keyout certs/cert.key -days 365 2- Make note of your Global API KEY and email from your cloudflare account. This information can be found in your under your profile Cloudflare dashboard After you have taking the global API Key, add it to the dockerfile in Traefik folder, and add your email as well as shown in the screenshot below:- pfSense SetupNow that we configure pfSense to redirect the traffic coming on port 80 and port 443 of the public IP to be redirected to the Traefik reverse proxy. That will be quickly done through the NAT rule to allow port forwarding and through the Firewall Rules to allow incoming traffic to come in.The Firewall rules would look like something like this: The NAT rules would look like something like this:Conclusion In this blog I explained how to add a secondary access to your homelab using Cloudflare free features and using Traefik reverse proxy. I also touched a bit how to configure the routes on pfSense to allow the traffic through using NAT rules. Using such method can help if you lose you VPN access to your environment and help prevent single point of failure on certain cases. ReferencesCloudflare docsCloudflare Settings for Traefik DockerEvan’s Github" }, { "title": "Virtualized Malware Analysis Environment", "url": "/posts/Cuckoo_SIFT_With_Ansible/", "categories": "DFIR, Malware_Analysis", "tags": "Malware Analysis", "date": "2020-04-14 00:00:00 +0800", "snippet": "Background Cuckoo Sandbox ProjectCuckoo Sandbox project is an open-sourced tool that automates dynamic malware analysis. The project was built using python language which makes the installment process easier to install across all platform. Cuckoo also supports malware analysis on Windows, OSX, Linux, and Android. Cuckoo, also, have a well-defined structure that makes it easy to customize. This feature has allowed analysts across the world to add custom modules and plugins that capture certain artifacts to result the best outcome. Lastly, Cuckoo have a great community support for the project which beyond the scope of this blog but could be found on this github repo. Cuckoo Sandbox CommunitySIFT WorkstationSIFT Workstation is a powerful forensics framework that contains most of the open-source tools used by industry-level analysts. SIFT workstation comes in the form of an appliance and could be ran as a virtual machine. Reducing the overhead of installing and configuring each tool is one of its greatest advantage.AnsibleAnsible is an open-source software and powerful tools that could be used for various aspects. Ansible mainly know for four overall functionality: Application Deployment (Like Fabric) Provisioning (Like Cobbler or JuJu) Configuration Management (Like Chef or Puppet) Multi-tier Orchestrion (Like Chef-Metal)VagrantVagrant is a provisioning platform from hashicorp that is used to spins up and maintain virtual machines in different hypervisor providers such as AWS, VMware and virtualbox.open keyboard shortcuts file.IntroductionConfiguring and setting up different services manually is both time-consuming and labor-intensive. In this project, I tried to implement an automated solution for a malware analyst to deploy a sandboxed environment using different technology. Starting by Ansible scripts that deploy SANS workstation to a VMware vCenter host then deployment Cuckoo sandbox software along with all its required dependencies using ansible. After that, I used Vagrant to build a virtual machine (In my case, I ‘ll be using Windows 10, however, there is plenty of supported OS), to be used for my malware analysis. Constructed TopologyAs depicted in the topology we have a computer that communicated with VMware vCenter to deploy the SIFT workstation. After that, we configure the workstation with Cuckoo project using Ansible. Lastly, we provision VirtualBox using vagrant to spawn up a virtual machine to be used for malware analysis.Install/SetupBefore diving into the project let’s take a quick look at the structure of the code: As you can here, we have a bunch of files, starting from the top, we have:SIFT-Cuckoo-Playbook.yml: which contains the overall tasks(roles) related to Cuckoo project setup.SIFT-Deploy.yml: which contains the vCenter deployment of SIFT workstation.inventory.ini: contains the variables used to communicate with the other node such IP, user and password of the client machinerequirements.sh: has all the dependencies used by this project.roles: has the different subtask of the projectroles\\SIFT-Cuckoo-Sandbox\\*: subtask to install and configure Cuckoo sandbox projectvars.yml: a centralized place to hold all the variables of the project. To install the project, nvaigete th efolling github repo and clone it.git clone https://github.com/sh1dow3r/SandBoxercd SandBoxer./requirements.sh to install all the dependenciesEdit vars.yml accordinglyThe rest will follows in the next section.How does it work?- SIFT Workstation DeploymentAfter we install the dependencies for the project we start with the first step, which is deploying our workstation to vCenter. To do so, we will edit the vars.yml section to have the required information we need to deploy the vm.Here is a quick example of what my file looksvars.yml file contains a lot of variables related to the vCenter API. After making sure, you have all the variables set. Additionally, make sure you have the SIFT ova file in the correct path. Now we will run the the playbook SIFT-Deploy.yml to deploy SIFT workstation using the follwoing command.ansible-playbook SIFT-Deploy.ymlAs you can see, in the previous screenshot the ansible playbook is completed and the vm is deployed on the vCenter server. (Note: you may discard the warnings while running the playbook).- Cuckoo Project DeploymentNow that we have deployed the virtual machine, let’s starts the the Cuckoo deployment. Starting by adding the required variables in the vars.yml. After you have inputted the necessary vars, you can run the Cuckoo ansible playbook as follows:ansible-playbook SIFT-Cuckoo-Sandbox.yml -i inventory.iniAfter issuing the command we wait for a few minutes for the whole setup to be done then we hop onto the workstation to confirm the installment as seen in the screenshot belowAfter we confirmed all the configuration is done, we’ll navigate to home/cuckoo/vagrant_files which has the windows10 virtual machine we’re going to use for malware analysis. There should be a bash script called vagrant_script.sh that is going to pull a windows 10 image and set it up with Virtualbox then take a stable snapshot.After windows10 is up and running make sure it’s snapshotted and there you go, you have your Cuckoo Sandbox up and ruining! :ConclusionBuilding Malware analysis environment manually requires time, resource and can bee overwhelming to setup. In this project, I proposed a solution of an automated processto setup you’re own malware environment using DevOps tools like Ansible and Vagrant. ReferencesAnsible docsVagrant-Virtualbox providerCuckoo Ansible example" }, { "title": "ARP Spoofing &amp; IP Source Guard", "url": "/posts/ARP&IPSG/", "categories": "Network_Security", "tags": "Network Security", "date": "2019-07-13 00:00:00 +0800", "snippet": "Introduction ARP is one of the most important networking protocol that other protocols rely on as it maps a mac address to an associated IP address. The attack we will be talking about is called ARP spoofing and is a type of Man-in-the-middle-attack in which the attacker tries to respond to ARP request with a forged packet.TopologyARP Attacks:ARP Spoofing Using the arpspoof tool, which is available in Kali Linux, I spoofed one of the clients MAC address. arpspoof command on Kali This will enable the attacker to inspect all traffic destined for 10.150.100.5 by redirecting to the Kali IP address then forward it back to the victim. As we can see in Wireshark capture. Dynamic ARP Inspection Mitigation When we want to avoid invalid and malicious ARP packets, we can use Dynamic ARP Inspection (DAI). This feature work similarly to DHCP snooping, in that if a client sends a message that is recognized as malicious it will drop these illegitimate packets. We start the switch configuration by applying DAI on the switch in It’s worth notating that I applying the ACL “static ARP” which contains the IP and mac addresses for my clients. Additionally, if I rerun the attack again we won’t see the packets on the victim’s machine as the packets gets dropped when it reaches the switch and does not get forwarded. Additionally, the switch raises a lot of warnings to notify the network administrator as shown below.Introduction IP Source Guard (IPSG) is a defense mechanism that is designed to prevent IP spoofing attacks. For instance, when someone wants to spoof the address of another host, this feature will prevent this spoofing because this IP address is not assigned by DHCP. IPSG works by relying on DHCP snooping and IP source bindings to match the IP address on untrusted Layer 2 networks. TopologyIP Attacks:IP Spoofing IP spoofing is an attack performed to achieve one of two goals: a DOS (Denial of Services) or unauthorized access to a network. We perform this attack by using Scapy. As shown below we build an IP header with a spoofed IP address and the destination of our target IP address. Also, it worth noting that in my topology the actual IP address of our Kali is 10.150.100.12, the reason this is working is there is no validation that maps the IP address to the mac address of the host that is sending the spoofed IP as we will see, this is how the mitigation works. Now if we look at Wireshark capture below, we see that the ICMP packet was sent to the target and the replay came back to the spoofed IP address.IP Source Guard Mitigation This mitigation relies on the DHCP database so we need to make sure we enable that as we discussed in previous mitigations. After this we include the IP source guard configuration to the switch as show below Now if we try to spoof an IP from scapy on Kali, the victim should not successfully respond back to that packet. If we take a look at the DHCP snooping database it show that the Kali mac address is associated with that IP address, and if tried to send a packet with different IP address other than that IP it should just get dropped.Conclusoin Spoofing an IP address was an issue since the attacker can spoof his IP address todo whatever he is not allowed to do like going into a specific network withsomeone’s else IP address, he was able to discover a specific network and exploiteverything inside it and no one in the network can notices that. After “IP SourceGuard”, it becomes much harder or we can say it’s impossible for the attacker tospoof his IP address.On the other hand, ARP spoofing is a real issue since it’s masquerading attempt to besomeone else over the network and get everything that it’s belonging to him.However, Cisco came up with DAI on their switch as a solution for this issue, aswe saw when the switch was configured with DAI the attack is being preventedand the switch drops illegitimated ARP packets. Hence, it’s preventing Man inthe Middle Attack even if it takes one more step on configure static ARP list.ReferencesIP Source GuardARP Spoofing" }, { "title": "DHCP Attack &amp; Mitigation", "url": "/posts/DHCP_Attack_&_Mitigation/", "categories": "Network_Security", "tags": "Network Security", "date": "2019-04-22 00:00:00 +0800", "snippet": "Introduction DHCP short for Dynamic Host Configuration Protocol) is one of the most important service to have is a network. This protocol serves the advantage of providing clients information such as IP address, subnet mask, DNS server, default gateway dynamically rather than configuring each host statically. This server start a process called (DORA) short for Discover, Offer, Request, Acknowledge. The process starts with the server listing on port 67 for discover requests on the network sent by clients. When a client sends out a discover packet across the network the server sees it and respond back with an offer providing the “offered” IP address over to the clients who is listening on port 68. The client then requests that IP address from the server and the server confirms that request by sending an ACK packet back.TopologyDHCP AttacksDHCP Starvation DHCP Starvation is an attack wherein the attacker looks at the entire DHCP scope and tries to acquire all the available address in that scope. This attack is considered a Denial of Service attack, as other clients will not be able too receive IP addresses anymore. Over time, the adversary continues to use new MAC addresses to send renewals for all the DHCP leases. In order to perform this kind of attack we can use a tool called yersinia. This tool is powerful as it provides plenty of low level networking attacks. By opening up the tool using this command yersinia -G and click on DHCP attack as show below, we can undertake the attack. Moreover, we can see the Wireshark traffic Which shows a heavy amount of Discover packets. Here is a wireshark snippet during the DHCP starvation attack Now if take a look at the switch configuration by typing the command show ip dhcp binding we can see the all the addresses in scope have been acquired by fake/forged MAC addresses generated by YersiniaDHCP Spoofing / DHCP rogue server A DHCP rogue server attack occurs when an attacker acts as a legitimate DHCP server in which he gives out DHCP information., including: IP addresses, gateways, and DNS. To performt his attack the “ettercap” tool can be used. To start this tool use the command ettercap -G and click on DHCP attack. Moreover, we can see Wireshark traffic which show heavy amount of Discover packets. Here is a wireshark snippet during the DHCP rouge server attack It’s worth noting that the address of our spoofed DHCP server is 10.150.100.12.DHCP Attacks Mitigation Moving on to how to prevent this attack, we can say that Cisco already has a security feature that is capable of identifying trusted and untrusted host. This feature is called DHCP snooping which has the ability to validate messages from untrusted host and drop them. In addition, it can evaluate DHCP traffic from trusted and untrusted host. This feature requires an offer binding database which has information about trusted and untrusted hosts. In our example, we can see that the port FE0/5 is trusted which means the DHCP server resides on that server. Switch Configuration for DHCP SnoopingNow if we look at the Wireshark capture when the attacker tries to send an OFFER packet back to the victim. We will see the packet gets ignored by the victim and only respond back to the legitimate DHCP server Wireshark Capture after DHCP Snooping is ConfiguredSo, only the packet that is formed by the legitimate DHCP server on the trust port is the only packets that gets advertise to the DHCP client and start the DORA process.Conclusoin From this experiment in DHCP Snooping Attack, it’s obvious that thisattack leads to compromising the hall connection between two ends which isknown as “Man in Middle Attack”. And “DHCP Snooping” and “trusted ports”features in Cisco switches have the ability to prevent illegitimate servers toacting as DHCP server. Thus, DHCP Snooping is acting as a firewall forpreventing this attack.ReferencesDHCP Snooping" }, { "title": "VLAN Hopping", "url": "/posts/VLAN_Hopping/", "categories": "Network_Security", "tags": "Network Security", "date": "2019-03-19 00:00:00 +0800", "snippet": "Introduction Generally, when talking about VLAN hopping there are two type of attacks, one is called Double Tagging attack which we will be talking about here and the other is spoofing attack. Double Tagging attacks take advantage of a native VLAN trunking configuration in which frames are allowed to be transmitted through VLANs via the trunking port. The attack manipulates the 802.1Q header by adding an extra header which will get stripped off when leaving the switch and forwarded to the trunk port that’s on native VLAN 1. Subsequently, the other switch will forward the packet to the corresponding host on that VLAN. It’s worth noting that the destination of the packet will be based off of the second tag, since the switch only looks at the first VLAN tag it sees. ConstructedTopologyAttack Steps As shown in my topology I setup the first Switch to be on VLAN 1 This can be done on the configuration terminal: int valn 1 After that when we enter the interface we assign it to the address 10.10.10.1 In this case, the attacker is on port fa1/0 , the trunk port is on port fa1/1. Moreover, on switch 2, we gave VLAN 2 an IP address of 10.10.11.1 and VLAN 1 an IP address on the same network as Switch Now, if we take a look at port fa1/0 it will have the victim connected to it, and when we look at the other port, fa1/1, it will have the trunk port on it.The attacker now has an address of 10.10.10.3 on the first network. On the other hand the victim is on VLAN 10 and has an ip address of 10.10.10.1 Now, we go to the terminal and run the Yersinia tool. In order to perform the double tagging attack we click on the 802.1Q header to perform the attack. When we perform the attack we can see the capture on the attackers machine of an ICMP packet going through the VLAN and reaching the other network. Looking closely at the packet we can see the VLAN double tags, the first one on VLAN 1 and the other on VLAN 10, it is worth noting that this is only shown from the attackers box.If we take a close look at the ICMP packet on the victims machine, we will see the ICMP request being received and no sign of any 802Q.1 header. Mitigation the Attack There are several common best practices that network and system administration use to defend against this attack, including: Disabling dynamic port on non-usable ports on the switch Ensuring that swithcports are set to no negotiate which by default disables DTP. Not using VLAN 1 for inbound management traffic, and picking any other VLAN dedicated to that purpose. In other words, prune VLAN 1 from all the trunks and from all the access ports that don’t require it Conclusoin This kind of attack becomes a risk due it’s capabilities to hopping VLANs, sincethe attacker can deliver frames to different VLAN without even using inter-VLAN routing. Nowadays, Cisco realized this vulnerability and they preventedit in newer versions such “Cisco IOS 12.2” which it configured to preventdouble VLAN tagging.ReferencesVLAN HoppingMitigate VLAN hopping attackCisco Guied" }, { "title": "Port Security", "url": "/posts/Port_Security/", "categories": "Network_Security", "tags": "Network Security", "date": "2019-02-14 00:00:00 +0800", "snippet": "Introduction Before talking about port security we need to mention the operation process of layer 2 devices as known as “switches.” Switches operate by building tables, called context-addressable memory (CAM) tables, which the switch uses t map MAC address to their corresponding port. Depending on the version and capability of the switch, these tables can only maps a limited number of entries involving both (mac address, switch port number). One attack called CAM overflow takes advantage of this limitation to overflow the CAM table and disable the switching logic of the switch. This attack occurs when an attacker connects to a port (or multiple ports) on a switch and then crafts requests from thousands of fake random mac addresses. This makes the switch think that these are real mac address connections, with their corresponding ports, and use these to fill up the CAM table. This CAM table overflow attack turns the switch into a hub, meaning it enables the attacker to see the traffic going in/out of the switch. This could lead to a man-in-the-middle-attack. The idea of securing the port and limiting number of devices/entries helps to eliminate the attack as we will discover in the following section. Constructed TopologyAttack Steps After booting up our Kali box and inspecting the CAM Table on oour switch, we can see that the switch’s CAM table is configured to learn dynamically: Also if we look up the count for the CAM table we will see only 4 devices as expected After that, I opened up our Kali machine and used the macof tool, which basically sends out requests from a number of random fake mac address that will be registered in the switch’s CAM table. I ran the command macof –i eth0 the flag -i eth0 to specify the interface that the tool will send traffic through. Now, if we take a look at the MAC address table, we will see the CAM table has been overflowed from the macof tool we started. Moreover, if we take a look at the count we will see that no more space available.Mitigation the Attack One of the most popular mitigations against CAM overflows on Cisco routers is port-security. Port-security has three modes which we will talk about the following sections. Restrict Mode Restrict mode has the ability to make the port stay open when an attack occurs, However, it will drop any packets that violate the mac address rules set on the switch.For example, as the screenshot below depicts, we have only allowed 3 mac address to be learned dynamically. When a fourth mac address wants to be registered on that port. The switch will raise a violation flag and drop the packet. An example of the switch output when I ran the attack again is shown in screenshot above.Now if we want to take a look at that interface to see how many mac addresses have violated our rule. We can see that there have been 26380 violations on that port. Protect Mode Protect mode also allows a port to stay up during an attack similar to what we saw in restrict mode. In protect mode it drops any packets violating the rule, however, unlike restrict mode it drops the packets but it does not report back the violation to the switch monitoring the session as we saw in the restrict mode. When we ran the macof tool again against the switch, and then looked at the port, we saw that there were 185823 violations on that port but no warnings of the violations were generated. Shutdown Mode Lastly, shutdown mode works as follows, when a violation occurs a notification “SNMP” message will be sent and the port will immediately shutdown. For example, we configured our switch to accept a maximum of three mac address, and when this rule is violated, it will shut down the port. As the screenshot below shows, we after running the tool again on the same port we can see the port is shut down because we violated the rule of a maximum of three MAC address. ConclusionAs we see can see from the above experiment switchport security restricts outsiders from connecting into the enterprise networks. By configuring portsecurity one can avoid outsiders from accessing the network. Although there are ways to get into the network even though port security is configured, port security is just like a fence in the border. If a nation has built a fence on itsborders, it doesn’t mean that nobody will cross the border. Port Security just acts as first line of defense.ReferencesPort Security Packet LifePort Security Cisco Guied" }, { "title": "NAS Agent", "url": "/posts/NAS_Agent/", "categories": "Authentication", "tags": "", "date": "2018-12-23 00:00:00 +0800", "snippet": "Network Attached Storage has been around for a while, however using that for backup has been increasing a non-negligible vector of the integrity of the backup. We designed an agent that implements an encrypted backup for the client to provide efficiency and fast disaster recovery.Network attached Storage(NAS) is an approach to making stored data more accessible among devices on a network. Also viewed as dedicated file storage that enables multiple users and heterogeneous client devices to retrieve data from centralized disk capacity. By installing specialized software on dedicated hardware, Usually, enterprises can benefit from this as single-point access with built-in security, management, and fault tolerant capabilities. NAS communicates with other devices using file-based protocols, which is one of the easiest formats to navigate.In the code, a function was made to make use of SSH to send data to the server side using the client’s account in the server. In the server, each user has an account and password or public key that is stored in the account’s home directory. Using a password or public and private keys as figure 2 shows, the client side would be able to process the SSH authentication mechanism then send data each time it processes a message from the client. An example of the data that could be sent and process, when a client wants to create or delete a partition the client’s software gets the name and space from the user then sends the name of the new partition and how much space it takes. After adding or deleting a partition, the client’s software sends a mount request using NFS protocol to process the next step.NFS is used after the client asks for a new partition to be created then the server sends the confirmation for the new disk, and then again the client uses NFS to mount the new partition from the storage server as figure 3 shows. This way a new partition is made on the client’s device and the storage server. The advantages of using NFS, in this case, is that the client is able to mount different partitions from different storage servers without the need to its account if all storage servers are synced, as figure 5 shows. After mounting them, all the partitions will be mounted even after rebooting the device since they will be appended to /etc/fstab, and whenever a partition gets deleted the line associated with the partition will be removed. All that is constantly going each time a new request is being pushed to the server.Finally, the project is made yet under tests, the idea is to implement software that can backup files always without the need to uses third-party resources, it only uses SSH and NFS and pure implementation using Python so it can be easy to use for users. Installing and configuring the client is fairly easy. Installing and configuring the server is also simple. However, each user has to be added manually to the server, which must be Unix-like operating system. The hardware used in this experiment are two devices one acts as a server and the other one acts as a client. The server was Cent OS 7.2 and the client was also using Cent OS 7.2. The server had 6 TB of space and 16 GB of RAM, 4 cores and each core was producing 3.2GHz. The client had 100 GB of space and 16 GB of RAM, 4 cores and each core was producing 3.2GHz." } ]
